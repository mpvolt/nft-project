[{"/mnt/c/Users/Matt/Solidity/nft-starter-project/src/index.js":"1","/mnt/c/Users/Matt/Solidity/nft-starter-project/src/reportWebVitals.js":"2","/mnt/c/Users/Matt/Solidity/nft-starter-project/src/App.js":"3"},{"size":500,"mtime":1645662425593,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1645662425607,"results":"6","hashOfConfig":"5"},{"size":5142,"mtime":1645666787323,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12az2cv",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"/mnt/c/Users/Matt/Solidity/nft-starter-project/src/index.js",[],[],"/mnt/c/Users/Matt/Solidity/nft-starter-project/src/reportWebVitals.js",[],[],"/mnt/c/Users/Matt/Solidity/nft-starter-project/src/App.js",["18","19","20","21","22","23","24","25"],[],"import React, {useState, useEffect} from 'react';\nimport './styles/App.css';\nimport {ethers} from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst contractAddress = \"0x1FAa73D0Dc8E21bc0B4Fe8E26F844BABC2428653\";\nconst provider = await detectEthereumProvider();\nconst signer = provider.getSigner();\nconst contract = new ethers.Contract(contractAddress, myEpicNft.abi, signer);\nconst openseaLink = \"https://testnets.opensea.io/assets/INSERT_CONTRACT_ADDRESS_HERE/INSERT_TOKEN_ID_HER\";\n\nconst App = () => {\n\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalNfts, getTotalNumberOfNfts] = useState(\"\");\n  \n  const checkIfWalletIsConnected = async () => {\n    const {ethereum} = window;\n\n    if(ethereum)\n    {\n      const accounts = await ethereum.request({method: \"eth_accounts\"})\n\n      if(accounts.length !== 0)\n      {\n        setCurrentAccount(accounts[0]);\n\n        let chainId = await ethereum.request({method: \"eth_chainId\"});\n        console.log(\"Connected chain: \"+ chainId);\n\n        const rinkebyChainId = \"0x4\";\n        if(rinkebyChainId !== chainId)\n        {\n          alert(\"You are not connected to the Rinkeby Network, please change the network from 'Ethereum Mainnet' to 'Rinkeby Test Network' in Metamask. (Settings > Advanced > Show test networks)\");\n          return;\n        }\n        \n      }\n    }\n    else\n    {\n      console.log(\"ethereum object not found\");\n      return;\n    }\n  }\n\n  const connectWallet = async () => {\n    const {ethereum} = window;\n\n    if(ethereum)\n    {\n      const accounts = await ethereum.request({method: \"eth_requestAccounts\"})\n\n      if(accounts.length !== 0)\n      {\n        setCurrentAccount(accounts[0]);\n      }\n    }\n    else\n    {\n      console.log(\"ethereum object not found\");\n      return;\n    }\n  }\n\n  const makeAnNft = async() => {\n    try {\n      \n      const {ethereum} = window;\n      \n      if(selectedImage)\n      {\n        let nftTxn = await contract.makeAnEpicNFT(URL.createObjectURL(selectedImage));\n        console.log(\"Minting NFT....\")\n        await nftTxn.wait();\n    \n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n  \n        contract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n        \talert(`Hey there! We've minted your NFT. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: <https://testnets.opensea.io/assets/${contractAddress}/${tokenId.toNumber()}>`)\n        })\n        console.log(\"https://testnets.opensea.io/assets/\" + contractAddress + \"/\" + tokenId.toNumber());\n      }\n      else{\n        alert(\"Set an image first\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  \n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {checkIfWalletIsConnected();}, [])\n  \n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">NFT Collection</p>\n          <p className=\"sub-text\">\n            Turn your image into an NFT! \n          </p>\n          <p className=\"sub-text\">\n            You'll need metamask! Go ahead and get that here: https://metamask.io/download/\n          </p>\n          <p className=\"sub-text\">\n            After that, go here and get some Rinkeby ether for your wallet: https://www.rinkebyfaucet.com/\n          </p>\n          \n          {\n            currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n            ) : (\n            <button onClick={makeAnNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT </button>\n            )\n          }\n        </div>\n\n        {/* <div>\n          {\n            currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n            ) : (\n            <button onClick=\"\" className=\"cta-button connect-wallet-button\">\n              Show NFTs </button>\n            )\n          }\n        </div> */}\n        \n        <div>\n          {selectedImage && (\n            <div>\n            <img alt=\"not fount\" width={\"250px\"} src={URL.createObjectURL(selectedImage)} />\n            <br />\n            <button className=\"cta-button connect-wallet-button\" onClick={()=>setSelectedImage(null)}>Remove</button>\n            </div>\n          )}\n          <br />\n         \n          <br /> \n          <input className=\"cta-button\"\n            type=\"file\"\n            name=\"myImage\"\n            onChange={(event) => {\n              console.log(event.target.files[0]);\n              setSelectedImage(event.target.files[0]);\n            }}\n          />\n    </div>\n        \n      </div>\n    </div>\n  );\n};\n\nexport default App;",{"ruleId":"26","severity":1,"message":"27","line":9,"column":7,"nodeType":"28","messageId":"29","endLine":9,"endColumn":19},{"ruleId":"26","severity":1,"message":"30","line":10,"column":7,"nodeType":"28","messageId":"29","endLine":10,"endColumn":19},{"ruleId":"26","severity":1,"message":"31","line":11,"column":7,"nodeType":"28","messageId":"29","endLine":11,"endColumn":23},{"ruleId":"26","severity":1,"message":"32","line":17,"column":7,"nodeType":"28","messageId":"29","endLine":17,"endColumn":18},{"ruleId":"26","severity":1,"message":"33","line":23,"column":10,"nodeType":"28","messageId":"29","endLine":23,"endColumn":19},{"ruleId":"26","severity":1,"message":"34","line":23,"column":21,"nodeType":"28","messageId":"29","endLine":23,"endColumn":41},{"ruleId":"26","severity":1,"message":"35","line":77,"column":14,"nodeType":"28","messageId":"29","endLine":77,"endColumn":22},{"ruleId":"36","severity":2,"message":"37","line":91,"column":85,"nodeType":"28","messageId":"38","endLine":91,"endColumn":92},"no-unused-vars","'TWITTER_LINK' is assigned a value but never used.","Identifier","unusedVar","'OPENSEA_LINK' is assigned a value but never used.","'TOTAL_MINT_COUNT' is assigned a value but never used.","'openseaLink' is assigned a value but never used.","'totalNfts' is assigned a value but never used.","'getTotalNumberOfNfts' is assigned a value but never used.","'ethereum' is assigned a value but never used.","no-undef","'tokenId' is not defined.","undef"]