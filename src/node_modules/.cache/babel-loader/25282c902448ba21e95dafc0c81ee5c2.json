{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Matt/Solidity/nft-starter-project/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './styles/App.css';\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\nconst contractAddress = \"0x1FAa73D0Dc8E21bc0B4Fe8E26F844BABC2428653\";\nconst provider = new ethers.providers.Web3Provider(ethereum);\nconst signer = provider.getSigner();\nconst contract = new ethers.Contract(contractAddress, myEpicNft.abi, signer);\nconst openseaLink = \"https://testnets.opensea.io/assets/INSERT_CONTRACT_ADDRESS_HERE/INSERT_TOKEN_ID_HER\";\n\nconst App = () => {\n  _s();\n\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalNfts, getTotalNumberOfNfts] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        setCurrentAccount(accounts[0]);\n        let chainId = await ethereum.request({\n          method: \"eth_chainId\"\n        });\n        console.log(\"Connected chain: \" + chainId);\n        const rinkebyChainId = \"0x4\";\n\n        if (rinkebyChainId !== chainId) {\n          alert(\"You are not connected to the Rinkeby Network, please change the network from 'Ethereum Mainnet' to 'Rinkeby Test Network' in Metamask. (Settings > Advanced > Show test networks)\");\n          return;\n        }\n      }\n    } else {\n      console.log(\"ethereum object not found\");\n      return;\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      if (accounts.length !== 0) {\n        setCurrentAccount(accounts[0]);\n      }\n    } else {\n      console.log(\"ethereum object not found\");\n      return;\n    }\n  };\n\n  const makeAnNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (selectedImage) {\n        let nftTxn = await contract.makeAnEpicNFT(URL.createObjectURL(selectedImage));\n        console.log(\"Minting NFT....\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        contract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: <https://testnets.opensea.io/assets/${contractAddress}/${tokenId.toNumber()}>`);\n        });\n        console.log(\"https://testnets.opensea.io/assets/\" + contractAddress + \"/\" + tokenId.toNumber());\n      } else {\n        alert(\"Set an image first\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Turn your image into an NFT!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"You'll need metamask! Go ahead and get that here: https://metamask.io/download/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"After that, go here and get some Rinkeby ether for your wallet: https://www.rinkebyfaucet.com/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: makeAnNft,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Mint NFT \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: \"\",\n          className: \"cta-button connect-wallet-button\",\n          children: \"Show NFTs \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"not fount\",\n            width: \"250px\",\n            src: URL.createObjectURL(selectedImage)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cta-button connect-wallet-button\",\n            onClick: () => setSelectedImage(null),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"cta-button\",\n          type: \"file\",\n          name: \"myImage\",\n          onChange: event => {\n            console.log(event.target.files[0]);\n            setSelectedImage(event.target.files[0]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"L7IRuN9w6K1JDNCiv/dqi2d47x0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/mnt/c/Users/Matt/Solidity/nft-starter-project/src/App.js"],"names":["React","useState","useEffect","ethers","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","contractAddress","provider","providers","Web3Provider","ethereum","signer","getSigner","contract","Contract","abi","openseaLink","App","selectedImage","setSelectedImage","currentAccount","setCurrentAccount","totalNfts","getTotalNumberOfNfts","checkIfWalletIsConnected","window","accounts","request","method","length","chainId","console","log","rinkebyChainId","alert","connectWallet","makeAnNft","nftTxn","makeAnEpicNFT","URL","createObjectURL","wait","hash","on","from","tokenId","toNumber","error","renderNotConnectedContainer","event","target","files"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './styles/App.css';\nimport {ethers} from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst contractAddress = \"0x1FAa73D0Dc8E21bc0B4Fe8E26F844BABC2428653\";\nconst provider = new ethers.providers.Web3Provider(ethereum);\nconst signer = provider.getSigner();\nconst contract = new ethers.Contract(contractAddress, myEpicNft.abi, signer);\nconst openseaLink = \"https://testnets.opensea.io/assets/INSERT_CONTRACT_ADDRESS_HERE/INSERT_TOKEN_ID_HER\";\n\nconst App = () => {\n\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalNfts, getTotalNumberOfNfts] = useState(\"\");\n  \n  const checkIfWalletIsConnected = async () => {\n    const {ethereum} = window;\n\n    if(ethereum)\n    {\n      const accounts = await ethereum.request({method: \"eth_accounts\"})\n\n      if(accounts.length !== 0)\n      {\n        setCurrentAccount(accounts[0]);\n\n        let chainId = await ethereum.request({method: \"eth_chainId\"});\n        console.log(\"Connected chain: \"+ chainId);\n\n        const rinkebyChainId = \"0x4\";\n        if(rinkebyChainId !== chainId)\n        {\n          alert(\"You are not connected to the Rinkeby Network, please change the network from 'Ethereum Mainnet' to 'Rinkeby Test Network' in Metamask. (Settings > Advanced > Show test networks)\");\n          return;\n        }\n        \n      }\n    }\n    else\n    {\n      console.log(\"ethereum object not found\");\n      return;\n    }\n  }\n\n  const connectWallet = async () => {\n    const {ethereum} = window;\n\n    if(ethereum)\n    {\n      const accounts = await ethereum.request({method: \"eth_requestAccounts\"})\n\n      if(accounts.length !== 0)\n      {\n        setCurrentAccount(accounts[0]);\n      }\n    }\n    else\n    {\n      console.log(\"ethereum object not found\");\n      return;\n    }\n  }\n\n  const makeAnNft = async() => {\n    try {\n      \n      const {ethereum} = window;\n      \n      if(selectedImage)\n      {\n        let nftTxn = await contract.makeAnEpicNFT(URL.createObjectURL(selectedImage));\n        console.log(\"Minting NFT....\")\n        await nftTxn.wait();\n    \n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n  \n        contract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n        \talert(`Hey there! We've minted your NFT. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: <https://testnets.opensea.io/assets/${contractAddress}/${tokenId.toNumber()}>`)\n        })\n        console.log(\"https://testnets.opensea.io/assets/\" + contractAddress + \"/\" + tokenId.toNumber());\n      }\n      else{\n        alert(\"Set an image first\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  \n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {checkIfWalletIsConnected();}, [])\n  \n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">NFT Collection</p>\n          <p className=\"sub-text\">\n            Turn your image into an NFT! \n          </p>\n          <p className=\"sub-text\">\n            You'll need metamask! Go ahead and get that here: https://metamask.io/download/\n          </p>\n          <p className=\"sub-text\">\n            After that, go here and get some Rinkeby ether for your wallet: https://www.rinkebyfaucet.com/\n          </p>\n          \n          {\n            currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n            ) : (\n            <button onClick={makeAnNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT </button>\n            )\n          }\n        </div>\n\n        <div>\n          {\n            currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n            ) : (\n            <button onClick=\"\" className=\"cta-button connect-wallet-button\">\n              Show NFTs </button>\n            )\n          }\n        </div>\n        \n        <div>\n          {selectedImage && (\n            <div>\n            <img alt=\"not fount\" width={\"250px\"} src={URL.createObjectURL(selectedImage)} />\n            <br />\n            <button className=\"cta-button connect-wallet-button\" onClick={()=>setSelectedImage(null)}>Remove</button>\n            </div>\n          )}\n          <br />\n         \n          <br /> \n          <input className=\"cta-button\"\n            type=\"file\"\n            name=\"myImage\"\n            onChange={(event) => {\n              console.log(event.target.files[0]);\n              setSelectedImage(event.target.files[0]);\n            }}\n          />\n    </div>\n        \n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}